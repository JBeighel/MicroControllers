/**	@defgroup	crc16	CRC16 Calculations
	@brief		Common utilities and objects
	@details	v 0.1
	# Description #

	# Usage #

	# File Info #
		File:	CRC16.h.h
		Author:	J. Beighel
		Date:	2021-03-11
*/


#ifndef __CRC
	#define __CRC

/***** Includes    *****/
	#include "CommonUtils.h"

/***** Constants   *****/
	#ifdef CRC16_USETABLE
		/** 16 bit CRC lookup table generated for DNP CRCs.  Uses 0xA6BC (CRC_DNP lower 2 bytes) as the polynomial. */
		const u16 DnpCrc16Table [256] = {
			0x0000, 0x365e, 0x6cbc, 0x5ae2, 0xd978, 0xef26, 0xb5c4, 0x839a, 0xff89, 0xc9d7, 0x9335, 0xa56b, 0x26f1, 0x10af, 0x4a4d, 0x7c13,
			0xb26b, 0x8435, 0xded7, 0xe889, 0x6b13, 0x5d4d, 0x07af, 0x31f1, 0x4de2, 0x7bbc, 0x215e, 0x1700, 0x949a, 0xa2c4, 0xf826, 0xce78,
			0x29af, 0x1ff1, 0x4513, 0x734d, 0xf0d7, 0xc689, 0x9c6b, 0xaa35, 0xd626, 0xe078, 0xba9a, 0x8cc4, 0x0f5e, 0x3900, 0x63e2, 0x55bc,
			0x9bc4, 0xad9a, 0xf778, 0xc126, 0x42bc, 0x74e2, 0x2e00, 0x185e, 0x644d, 0x5213, 0x08f1, 0x3eaf, 0xbd35, 0x8b6b, 0xd189, 0xe7d7,
			0x535e, 0x6500, 0x3fe2, 0x09bc, 0x8a26, 0xbc78, 0xe69a, 0xd0c4, 0xacd7, 0x9a89, 0xc06b, 0xf635, 0x75af, 0x43f1, 0x1913, 0x2f4d,
			0xe135, 0xd76b, 0x8d89, 0xbbd7, 0x384d, 0x0e13, 0x54f1, 0x62af, 0x1ebc, 0x28e2, 0x7200, 0x445e, 0xc7c4, 0xf19a, 0xab78, 0x9d26,
			0x7af1, 0x4caf, 0x164d, 0x2013, 0xa389, 0x95d7, 0xcf35, 0xf96b, 0x8578, 0xb326, 0xe9c4, 0xdf9a, 0x5c00, 0x6a5e, 0x30bc, 0x06e2,
			0xc89a, 0xfec4, 0xa426, 0x9278, 0x11e2, 0x27bc, 0x7d5e, 0x4b00, 0x3713, 0x014d, 0x5baf, 0x6df1, 0xee6b, 0xd835, 0x82d7, 0xb489,
			0xa6bc, 0x90e2, 0xca00, 0xfc5e, 0x7fc4, 0x499a, 0x1378, 0x2526, 0x5935, 0x6f6b, 0x3589, 0x03d7, 0x804d, 0xb613, 0xecf1, 0xdaaf,
			0x14d7, 0x2289, 0x786b, 0x4e35, 0xcdaf, 0xfbf1, 0xa113, 0x974d, 0xeb5e, 0xdd00, 0x87e2, 0xb1bc, 0x3226, 0x0478, 0x5e9a, 0x68c4,
			0x8f13, 0xb94d, 0xe3af, 0xd5f1, 0x566b, 0x6035, 0x3ad7, 0x0c89, 0x709a, 0x46c4, 0x1c26, 0x2a78, 0xa9e2, 0x9fbc, 0xc55e, 0xf300,
			0x3d78, 0x0b26, 0x51c4, 0x679a, 0xe400, 0xd25e, 0x88bc, 0xbee2, 0xc2f1, 0xf4af, 0xae4d, 0x9813, 0x1b89, 0x2dd7, 0x7735, 0x416b,
			0xf5e2, 0xc3bc, 0x995e, 0xaf00, 0x2c9a, 0x1ac4, 0x4026, 0x7678, 0x0a6b, 0x3c35, 0x66d7, 0x5089, 0xd313, 0xe54d, 0xbfaf, 0x89f1,
			0x4789, 0x71d7, 0x2b35, 0x1d6b, 0x9ef1, 0xa8af, 0xf24d, 0xc413, 0xb800, 0x8e5e, 0xd4bc, 0xe2e2, 0x6178, 0x5726, 0x0dc4, 0x3b9a,
			0xdc4d, 0xea13, 0xb0f1, 0x86af, 0x0535, 0x336b, 0x6989, 0x5fd7, 0x23c4, 0x159a, 0x4f78, 0x7926, 0xfabc, 0xcce2, 0x9600, 0xa05e,
			0x6e26, 0x5878, 0x029a, 0x34c4, 0xb75e, 0x8100, 0xdbe2, 0xedbc, 0x91af, 0xa7f1, 0xfd13, 0xcb4d, 0x48d7, 0x7e89, 0x246b, 0x1235
		};

		/** 16 bit CRC lookup table generated for Modbus CRCs.  Uses 0xA001 (CRC_Modbus lower 2 bytes) as the polynomial. */
		const u16 ModbusCrc16Table [256] = {
			0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440,
			0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841,
			0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,
			0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040,
			0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441,
			0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,
			0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40,
			0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041,
			0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,
			0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840,
			0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40,
			0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,
			0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,
			0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841,
			0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,
			0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
		};
	#endif

/***** Definitions *****/
	/** For CRC calculation a lookup table needs generated that is used by the algorithm.  Each table is built with the
		same algorithm, but this algorithm requires a polynomial value as a seed.  The lower 16 bits of this value is
		the polynomial used for the supported algorithms.
		The higher 16 bits will be the initial CRC value.  Each algorithm has a specific value you begin the CRC calculation
		with.
		This list doubles as the list of all CRC calculations that can be done as some defined algorithms require special
		handling.
		@ingroup	crc16
	*/
	typedef enum eCRC16Types_t {
		/** DNP CRC polynomial */
		CRC_DNP = 0x0000A6BC,
		/** Modbus CRC polynomial, this is also used for file CRC values */
		CRC_Modbus = 0xFFFFA001
	} eCRC16Types_t;

	/** A standardized type to use when storing CRC values */
	typedef uint16_t crc16_t;

/***** Prototypes  *****/
	/** @brief Calculates the CRC value for a block of data
		This will determine the initial CRC value to begin the algorithm with based on the algorithm specified.  It
		will then carry out the CRC calculations using that algorithm.
		@ingroup	crc16
		@param Type The CRC algorithm type to use
		@param DataBuffer Pointer to the block of data to calculate the CRC value of
		@param DataLength The number of bytes in the data buffer
		@return The calculated CRC value
	*/
	crc16_t CalculateCRC16(eCRC16Types_t Type, void *DataBuffer, uint32_t DataLength);

	/** @brief Continues a CRC calculation by including more data into the calculation
		This will continue the CRC calculation using the specified CRC value as a starting poiunt then carry out
		the calculation using hte specified algorithm.
		This is intended for use on data sets that can not be done in a single pass and will have multiple partial
		CRC values calculated, each one carrying on where the last left off.
		@ingroup	crc16
		@param Type The CRC algorithm type to use
		@param DataBuffer Pointer to the block of data to include in the calculated CRC value
		@param DataLength The number of bytes in the data buffer
		@param PreviousCRC The CRC number calculated previously for this data set
		@return The calculated CRC value
	*/
	crc16_t ContinueCalculateCRC16Buffer(eCRC16Types_t Type, void *DataBuffer, uint32_t DataLength, crc16_t PreviousCRC);

	/** @brief Continues a CRC calculation by including more data into the calculation
		This will continue the CRC calculation using the specified CRC value as a starting point then carry out
		the calculation using hte specified algorithm.
		This is intended for use on data sets that can not be done in a single pass and will have multiple partial
		CRC values calculated, each one carrying on where the last left off.
		@ingroup	crc16
		@param Type The CRC algorithm type to use
		@param Byte The new data to include in the CRC calculation
		@param PreviousCRC The CRC number calculated previously for this data set
		@return The calculated CRC value
	*/
	crc16_t ContinueCalculateCRC16Byte(eCRC16Types_t Type, uint8_t Byte, crc16_t PreviousCRC);
 #endif
